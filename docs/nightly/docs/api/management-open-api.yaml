openapi: 3.1.0
info:
  title: Lakekeeper Management API
  description: Lakekeeper is a rust-native Apache Iceberg REST Catalog implementation. The Management API provides endpoints to manage the server, projects, warehouses, users, and roles. If Authorization is enabled, permissions can also be managed. An interactive Swagger-UI for the specific Lakekeeper Version and configuration running is available at `/swagger-ui/#/` of Lakekeeper (by default [http://localhost:8181/swagger-ui/#/](http://localhost:8181/swagger-ui/#/)).
  license:
    name: Apache-2.0
    identifier: Apache-2.0
  version: 0.7.3
servers:
- url: '{scheme}://{host}/{basePath}'
  description: Lakekeeper Management API
  variables:
    basePath:
      default: ''
      description: Optional prefix to be appended to all routes
    host:
      default: localhost
      description: The host address for the specified server
    scheme:
      default: https
      description: The scheme of the URI, either http or https
paths:
  /management/v1/bootstrap:
    post:
      tags:
      - server
      summary: |-
        Creates the user in the catalog if it does not exist.
        If the user exists, it updates the users' metadata from the token.
        The token sent to this endpoint should have "profile" and "email" scopes.
      operationId: bootstrap
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BootstrapRequest'
        required: true
      responses:
        '204':
          description: Server bootstrapped successfully
        4XX:
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IcebergErrorResponse'
        '500':
          description: InternalError
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IcebergErrorResponse'
  /management/v1/default-project:
    get:
      tags:
      - project
      summary: Get the default project
      operationId: get_default_project
      responses:
        '200':
          description: Project details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetProjectResponse'
        4XX:
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IcebergErrorResponse'
    delete:
      tags:
      - project
      summary: Delete the default project
      operationId: delete_default_project
      responses:
        '204':
          description: Project deleted successfully
        4XX:
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IcebergErrorResponse'
  /management/v1/default-project/rename:
    post:
      tags:
      - project
      summary: Rename the default project
      operationId: rename_default_project
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RenameProjectRequest'
        required: true
      responses:
        '200':
          description: Project renamed successfully
        4XX:
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IcebergErrorResponse'
  /management/v1/info:
    get:
      tags:
      - server
      summary: Get information about the server
      operationId: get_server_info
      responses:
        '200':
          description: Server info
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerInfo'
        4XX:
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IcebergErrorResponse'
        '500':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IcebergErrorResponse'
  /management/v1/permissions/check:
    post:
      tags:
      - permissions
      summary: Check if a specific action is allowed on the given object
      operationId: check
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CheckRequest'
        required: true
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CheckResponse'
  /management/v1/permissions/namespace/{namespace_id}:
    get:
      tags:
      - permissions
      summary: Get Authorization properties of a namespace
      operationId: get_namespace_by_id
      parameters:
      - name: namespace_id
        in: path
        description: Namespace ID
        required: true
        schema:
          type: string
          format: uuid
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetNamespaceAuthPropertiesResponse'
  /management/v1/permissions/namespace/{namespace_id}/access:
    get:
      tags:
      - permissions
      summary: Get my access to a namespace
      operationId: get_namespace_access_by_id
      parameters:
      - name: principal
        in: query
        description: |-
          The user or role to show access for.
          If not specified, shows access for the current user.
        required: false
        schema:
          $ref: '#/components/schemas/UserOrRole'
      - name: namespace_id
        in: path
        description: Namespace ID
        required: true
        schema:
          type: string
          format: uuid
      responses:
        '200':
          description: Server Relations
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetNamespaceAccessResponse'
  /management/v1/permissions/namespace/{namespace_id}/assignments:
    get:
      tags:
      - permissions
      summary: Get user and role assignments for a namespace
      operationId: get_namespace_assignments_by_id
      parameters:
      - name: relations
        in: query
        description: Relations to be loaded. If not specified, all relations are returned.
        required: false
        schema:
          type: array
          items:
            $ref: '#/components/schemas/NamespaceRelation'
      - name: namespace_id
        in: path
        description: Namespace ID
        required: true
        schema:
          type: string
          format: uuid
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetNamespaceAssignmentsResponse'
    post:
      tags:
      - permissions
      summary: Update permissions for a namespace
      operationId: update_namespace_assignments_by_id
      parameters:
      - name: namespace_id
        in: path
        description: Namespace ID
        required: true
        schema:
          type: string
          format: uuid
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateNamespaceAssignmentsRequest'
        required: true
      responses:
        '204':
          description: Permissions updated successfully
  /management/v1/permissions/namespace/{namespace_id}/managed-access:
    post:
      tags:
      - permissions
      summary: Set managed access property of a namespace
      operationId: set_namespace_managed_access
      parameters:
      - name: namespace_id
        in: path
        description: Namespace ID
        required: true
        schema:
          type: string
          format: uuid
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SetManagedAccessRequest'
        required: true
      responses:
        '200':
          description: ''
  /management/v1/permissions/project/access:
    get:
      tags:
      - permissions
      summary: Get my access to the default project
      operationId: get_project_access
      parameters:
      - name: principal
        in: query
        description: |-
          The user or role to show access for.
          If not specified, shows access for the current user.
        required: false
        schema:
          $ref: '#/components/schemas/UserOrRole'
      responses:
        '200':
          description: Server Relations
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetProjectAccessResponse'
  /management/v1/permissions/project/assignments:
    get:
      tags:
      - permissions
      summary: Get user and role assignments of a project
      operationId: get_project_assignments
      parameters:
      - name: relations
        in: query
        description: Relations to be loaded. If not specified, all relations are returned.
        required: false
        schema:
          type: array
          items:
            $ref: '#/components/schemas/ProjectRelation'
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetProjectAssignmentsResponse'
    post:
      tags:
      - permissions
      summary: Update permissions for the default project
      operationId: update_project_assignments
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateProjectAssignmentsRequest'
        required: true
      responses:
        '204':
          description: Permissions updated successfully
  /management/v1/permissions/project/{project_id}/access:
    get:
      tags:
      - permissions
      summary: Get my access to the default project
      operationId: get_project_access_by_id
      parameters:
      - name: principal
        in: query
        description: |-
          The user or role to show access for.
          If not specified, shows access for the current user.
        required: false
        schema:
          $ref: '#/components/schemas/UserOrRole'
      - name: project_id
        in: path
        description: Project ID
        required: true
        schema:
          type: string
          format: uuid
      responses:
        '200':
          description: Server Relations
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetProjectAccessResponse'
  /management/v1/permissions/project/{project_id}/assignments:
    get:
      tags:
      - permissions
      summary: Get user and role assignments to a project
      operationId: get_project_assignments_by_id
      parameters:
      - name: relations
        in: query
        description: Relations to be loaded. If not specified, all relations are returned.
        required: false
        schema:
          type: array
          items:
            $ref: '#/components/schemas/ProjectRelation'
      - name: project_id
        in: path
        description: Project ID
        required: true
        schema:
          type: string
          format: uuid
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetProjectAssignmentsResponse'
    post:
      tags:
      - permissions
      summary: Update permissions for a project
      operationId: update_project_assignments_by_id
      parameters:
      - name: project_id
        in: path
        description: Project ID
        required: true
        schema:
          type: string
          format: uuid
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateProjectAssignmentsRequest'
        required: true
      responses:
        '204':
          description: Permissions updated successfully
  /management/v1/permissions/role/{role_id}/access:
    get:
      tags:
      - permissions
      summary: Get my access to the default project
      operationId: get_role_access_by_id
      parameters:
      - name: role_id
        in: path
        description: Role ID
        required: true
        schema:
          type: string
          format: uuid
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetRoleAccessResponse'
  /management/v1/permissions/role/{role_id}/assignments:
    get:
      tags:
      - permissions
      summary: Get user and role assignments of a role
      operationId: get_role_assignments_by_id
      parameters:
      - name: relations
        in: query
        description: Relations to be loaded. If not specified, all relations are returned.
        required: false
        schema:
          type: array
          items:
            $ref: '#/components/schemas/RoleRelation'
      - name: role_id
        in: path
        description: Role ID
        required: true
        schema:
          type: string
          format: uuid
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetRoleAssignmentsResponse'
    post:
      tags:
      - permissions
      summary: Update permissions for a role
      operationId: update_role_assignments_by_id
      parameters:
      - name: role_id
        in: path
        description: Role ID
        required: true
        schema:
          type: string
          format: uuid
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateRoleAssignmentsRequest'
        required: true
      responses:
        '204':
          description: Permissions updated successfully
  /management/v1/permissions/server/access:
    get:
      tags:
      - permissions
      summary: Get my access to the server
      operationId: get_server_access
      parameters:
      - name: principal
        in: query
        description: |-
          The user or role to show access for.
          If not specified, shows access for the current user.
        required: false
        schema:
          $ref: '#/components/schemas/UserOrRole'
      responses:
        '200':
          description: Server Access
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetServerAccessResponse'
  /management/v1/permissions/server/assignments:
    get:
      tags:
      - permissions
      summary: Get user and role assignments of the server
      operationId: get_server_assignments
      parameters:
      - name: relations
        in: query
        description: Relations to be loaded. If not specified, all relations are returned.
        required: false
        schema:
          type: array
          items:
            $ref: '#/components/schemas/ServerRelation'
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetServerAssignmentsResponse'
    post:
      tags:
      - permissions
      summary: Update permissions for this server
      operationId: update_server_assignments
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateServerAssignmentsRequest'
        required: true
      responses:
        '204':
          description: Permissions updated successfully
  /management/v1/permissions/table/{table_id}/access:
    get:
      tags:
      - permissions
      summary: Get my access to a table
      operationId: get_table_access_by_id
      parameters:
      - name: principal
        in: query
        description: |-
          The user or role to show access for.
          If not specified, shows access for the current user.
        required: false
        schema:
          $ref: '#/components/schemas/UserOrRole'
      - name: table_id
        in: path
        description: Table ID
        required: true
        schema:
          type: string
          format: uuid
      responses:
        '200':
          description: Server Relations
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetTableAccessResponse'
  /management/v1/permissions/table/{table_id}/assignments:
    get:
      tags:
      - permissions
      summary: Get user and role assignments for a table
      operationId: get_table_assignments_by_id
      parameters:
      - name: relations
        in: query
        description: Relations to be loaded. If not specified, all relations are returned.
        required: false
        schema:
          type: array
          items:
            $ref: '#/components/schemas/TableRelation'
      - name: table_id
        in: path
        description: Table ID
        required: true
        schema:
          type: string
          format: uuid
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetTableAssignmentsResponse'
    post:
      tags:
      - permissions
      summary: Update permissions for a table
      operationId: update_table_assignments_by_id
      parameters:
      - name: table_id
        in: path
        description: Table ID
        required: true
        schema:
          type: string
          format: uuid
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateTableAssignmentsRequest'
        required: true
      responses:
        '204':
          description: Permissions updated successfully
  /management/v1/permissions/view/{view_id}/access:
    get:
      tags:
      - permissions
      summary: Get my access to a view
      operationId: get_view_access_by_id
      parameters:
      - name: principal
        in: query
        description: |-
          The user or role to show access for.
          If not specified, shows access for the current user.
        required: false
        schema:
          $ref: '#/components/schemas/UserOrRole'
      - name: view_id
        in: path
        description: View ID
        required: true
        schema:
          type: string
          format: uuid
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetViewAccessResponse'
  /management/v1/permissions/view/{view_id}/assignments:
    get:
      tags:
      - permissions
      summary: Get user and role assignments for a view
      operationId: get_view_assignments_by_id
      parameters:
      - name: relations
        in: query
        description: Relations to be loaded. If not specified, all relations are returned.
        required: false
        schema:
          type: array
          items:
            $ref: '#/components/schemas/ViewRelation'
      - name: view_id
        in: path
        description: View ID
        required: true
        schema:
          type: string
          format: uuid
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetViewAssignmentsResponse'
    post:
      tags:
      - permissions
      summary: Update permissions for a view
      operationId: update_view_assignments_by_id
      parameters:
      - name: view_id
        in: path
        description: View ID
        required: true
        schema:
          type: string
          format: uuid
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateViewAssignmentsRequest'
        required: true
      responses:
        '204':
          description: Permissions updated successfully
  /management/v1/permissions/warehouse/{warehouse_id}:
    get:
      tags:
      - permissions
      summary: Get Authorization properties of a warehouse
      operationId: get_warehouse_by_id
      parameters:
      - name: warehouse_id
        in: path
        description: Warehouse ID
        required: true
        schema:
          type: string
          format: uuid
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetWarehouseAuthPropertiesResponse'
  /management/v1/permissions/warehouse/{warehouse_id}/access:
    get:
      tags:
      - permissions
      summary: Get my access to a warehouse
      operationId: get_warehouse_access_by_id
      parameters:
      - name: principal
        in: query
        description: |-
          The user or role to show access for.
          If not specified, shows access for the current user.
        required: false
        schema:
          $ref: '#/components/schemas/UserOrRole'
      - name: warehouse_id
        in: path
        description: Warehouse ID
        required: true
        schema:
          type: string
          format: uuid
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetWarehouseAccessResponse'
  /management/v1/permissions/warehouse/{warehouse_id}/assignments:
    get:
      tags:
      - permissions
      summary: Get user and role assignments for a warehouse
      operationId: get_warehouse_assignments_by_id
      parameters:
      - name: relations
        in: query
        description: Relations to be loaded. If not specified, all relations are returned.
        required: false
        schema:
          type: array
          items:
            $ref: '#/components/schemas/WarehouseRelation'
      - name: warehouse_id
        in: path
        description: Warehouse ID
        required: true
        schema:
          type: string
          format: uuid
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetWarehouseAssignmentsResponse'
    post:
      tags:
      - permissions
      summary: Update permissions for a project
      operationId: update_warehouse_assignments_by_id
      parameters:
      - name: warehouse_id
        in: path
        description: Warehouse ID
        required: true
        schema:
          type: string
          format: uuid
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateWarehouseAssignmentsRequest'
        required: true
      responses:
        '204':
          description: Permissions updated successfully
  /management/v1/permissions/warehouse/{warehouse_id}/managed-access:
    post:
      tags:
      - permissions
      summary: Set managed access property of a warehouse
      operationId: set_warehouse_managed_access
      parameters:
      - name: warehouse_id
        in: path
        description: Warehouse ID
        required: true
        schema:
          type: string
          format: uuid
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SetManagedAccessRequest'
        required: true
      responses:
        '200':
          description: ''
  /management/v1/project:
    post:
      tags:
      - project
      summary: Create a new project
      operationId: create_project
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateProjectRequest'
        required: true
      responses:
        '201':
          description: Project created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateProjectResponse'
        4XX:
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IcebergErrorResponse'
  /management/v1/project-list:
    get:
      tags:
      - project
      summary: List all projects the requesting user has access to
      operationId: list_projects
      responses:
        '200':
          description: List of projects
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListProjectsResponse'
        4XX:
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IcebergErrorResponse'
  /management/v1/project/{project_id}:
    get:
      tags:
      - project
      summary: Get a specific project by id
      operationId: get_project_by_id
      parameters:
      - name: project_id
        in: path
        required: true
        schema:
          type: string
          format: uuid
      responses:
        '200':
          description: Project details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetProjectResponse'
        4XX:
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IcebergErrorResponse'
    delete:
      tags:
      - project
      summary: Delete the default project
      operationId: delete_project_by_id
      parameters:
      - name: project_id
        in: path
        required: true
        schema:
          type: string
          format: uuid
      responses:
        '204':
          description: Project deleted successfully
        4XX:
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IcebergErrorResponse'
  /management/v1/project/{project_id}/rename:
    post:
      tags:
      - project
      summary: Rename project by id
      operationId: rename_project_by_id
      parameters:
      - name: project_id
        in: path
        required: true
        schema:
          type: string
          format: uuid
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RenameProjectRequest'
        required: true
      responses:
        '200':
          description: Project renamed successfully
        4XX:
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IcebergErrorResponse'
  /management/v1/role:
    get:
      tags:
      - role
      summary: List roles in a project
      operationId: list_roles
      parameters:
      - name: name
        in: query
        description: Search for a specific role name
        required: false
        schema:
          type:
          - string
          - 'null'
      - name: pageToken
        in: query
        description: Next page token
        required: false
        schema:
          type:
          - string
          - 'null'
      - name: pageSize
        in: query
        description: |-
          Signals an upper bound of the number of results that a client will receive.
          Default: 100
        required: false
        schema:
          type: integer
          format: int64
      - name: projectId
        in: query
        description: |-
          Project ID from which roles should be listed
          Only required if the project ID cannot be inferred from the
          users token and no default project is set.
        required: false
        schema:
          type: string
          format: uuid
      responses:
        '200':
          description: List of roles
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListRolesResponse'
        4XX:
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IcebergErrorResponse'
    post:
      tags:
      - role
      summary: Create a new role
      operationId: create_role
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateRoleRequest'
        required: true
      responses:
        '201':
          description: Role successfully created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Role'
        4XX:
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IcebergErrorResponse'
  /management/v1/role/{id}:
    get:
      tags:
      - role
      summary: Get a role
      operationId: get_role
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
          format: uuid
      responses:
        '200':
          description: Role details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Role'
        4XX:
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IcebergErrorResponse'
    post:
      tags:
      - role
      summary: Update a role
      operationId: update_role
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
          format: uuid
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateRoleRequest'
        required: true
      responses:
        '200':
          description: Role updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Role'
        4XX:
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IcebergErrorResponse'
    delete:
      tags:
      - role
      summary: Delete role
      description: All permissions of the role are permanently removed.
      operationId: delete_role
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
          format: uuid
      responses:
        '204':
          description: Role deleted successfully
        4XX:
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IcebergErrorResponse'
  /management/v1/search/role:
    post:
      tags:
      - role
      summary: Search for roles (Fuzzy)
      operationId: search_role
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SearchRoleRequest'
        required: true
      responses:
        '200':
          description: List of users
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SearchRoleResponse'
        4XX:
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IcebergErrorResponse'
  /management/v1/search/user:
    post:
      tags:
      - user
      summary: Search for users (Fuzzy)
      operationId: search_user
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SearchUserRequest'
        required: true
      responses:
        '200':
          description: List of users
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SearchUserResponse'
        4XX:
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IcebergErrorResponse'
  /management/v1/user:
    get:
      tags:
      - user
      summary: List users
      operationId: list_user
      parameters:
      - name: name
        in: query
        description: Search for a specific username
        required: false
        schema:
          type:
          - string
          - 'null'
      - name: pageToken
        in: query
        description: Next page token
        required: false
        schema:
          type:
          - string
          - 'null'
      - name: pageSize
        in: query
        description: |-
          Signals an upper bound of the number of results that a client will receive.
          Default: 100
        required: false
        schema:
          type: integer
          format: int64
      responses:
        '200':
          description: List of users
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListUsersResponse'
        4XX:
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IcebergErrorResponse'
    post:
      tags:
      - user
      summary: |-
        Creates the user in the catalog if it does not exist.
        If the user exists, it updates the users' metadata from the token.
        The token sent to this endpoint should have "profile" and "email" scopes.
      operationId: create_user
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUserRequest'
        required: true
      responses:
        '200':
          description: User updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '201':
          description: User created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        4XX:
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IcebergErrorResponse'
  /management/v1/user/{id}:
    get:
      tags:
      - user
      summary: Get a user by ID
      operationId: get_user
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
          format: uuid
      responses:
        '200':
          description: User details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        4XX:
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IcebergErrorResponse'
    put:
      tags:
      - user
      summary: |-
        Update details of a user. Replaces the current details with the new details.
        If a field is not provided, it is set to `None`.
      operationId: update_user
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
          format: uuid
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateUserRequest'
        required: true
      responses:
        '200':
          description: User details updated successfully
        4XX:
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IcebergErrorResponse'
    delete:
      tags:
      - user
      summary: Delete user
      description: |-
        All permissions of the user are permanently removed and need to be re-added
        if the user is re-registered.
      operationId: delete_user
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
          format: uuid
      responses:
        '204':
          description: User deleted successfully
        4XX:
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IcebergErrorResponse'
  /management/v1/warehouse:
    get:
      tags:
      - warehouse
      summary: List all warehouses in a project
      description: |-
        By default, this endpoint does not return deactivated warehouses.
        To include deactivated warehouses, set the `include_deactivated` query parameter to `true`.
      operationId: list_warehouses
      parameters:
      - name: warehouseStatus
        in: query
        description: |-
          Optional filter to return only warehouses
          with the specified status.
          If not provided, only active warehouses are returned.
        required: false
        schema:
          type: array
          items:
            $ref: '#/components/schemas/WarehouseStatus'
      - name: projectId
        in: query
        description: |-
          The project ID to list warehouses for.
          Setting a warehouse is required.
        required: false
        schema:
          type:
          - string
          - 'null'
          format: uuid
      responses:
        '200':
          description: List of warehouses
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListWarehousesResponse'
        4XX:
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IcebergErrorResponse'
    post:
      tags:
      - warehouse
      summary: Create a new warehouse.
      description: |-
        Create a new warehouse in the given project. The project
        of a warehouse cannot be changed after creation.
        The storage configuration is validated by this method.
      operationId: create_warehouse
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateWarehouseRequest'
        required: true
      responses:
        '201':
          description: Warehouse created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateWarehouseResponse'
        4XX:
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IcebergErrorResponse'
  /management/v1/warehouse/{warehouse_id}:
    get:
      tags:
      - warehouse
      summary: Get a warehouse by ID
      operationId: get_warehouse
      parameters:
      - name: warehouse_id
        in: path
        required: true
        schema:
          type: string
          format: uuid
      responses:
        '200':
          description: Warehouse details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetWarehouseResponse'
        4XX:
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IcebergErrorResponse'
    delete:
      tags:
      - warehouse
      summary: Delete a warehouse by ID
      operationId: delete_warehouse
      parameters:
      - name: warehouse_id
        in: path
        required: true
        schema:
          type: string
          format: uuid
      responses:
        '204':
          description: Warehouse deleted successfully
        4XX:
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IcebergErrorResponse'
  /management/v1/warehouse/{warehouse_id}/activate:
    post:
      tags:
      - warehouse
      summary: Activate a warehouse
      operationId: activate_warehouse
      parameters:
      - name: warehouse_id
        in: path
        required: true
        schema:
          type: string
          format: uuid
      responses:
        '200':
          description: Warehouse activated successfully
        4XX:
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IcebergErrorResponse'
  /management/v1/warehouse/{warehouse_id}/deactivate:
    post:
      tags:
      - warehouse
      summary: Deactivate a warehouse
      operationId: deactivate_warehouse
      parameters:
      - name: warehouse_id
        in: path
        required: true
        schema:
          type: string
          format: uuid
      responses:
        '200':
          description: Warehouse deactivated successfully
        4XX:
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IcebergErrorResponse'
  /management/v1/warehouse/{warehouse_id}/delete-profile:
    post:
      tags:
      - warehouse
      summary: Update the Deletion Profile (soft-delete) of a warehouse.
      operationId: update_warehouse_delete_profile
      parameters:
      - name: warehouse_id
        in: path
        required: true
        schema:
          type: string
          format: uuid
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateWarehouseDeleteProfileRequest'
        required: true
      responses:
        '200':
          description: Deletion Profile updated successfully
        4XX:
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IcebergErrorResponse'
  /management/v1/warehouse/{warehouse_id}/deleted-tabulars:
    get:
      tags:
      - warehouse
      summary: List soft-deleted tabulars
      description: List all soft-deleted tabulars in the warehouse that are visible to you.
      operationId: list_deleted_tabulars
      parameters:
      - name: namespaceId
        in: query
        description: Filter by Namespace ID
        required: false
        schema:
          type: string
          format: uuid
      - name: pageToken
        in: query
        description: Next page token
        required: false
        schema:
          type:
          - string
          - 'null'
      - name: pageSize
        in: query
        description: |-
          Signals an upper bound of the number of results that a client will receive.
          Default: 100
        required: false
        schema:
          type: integer
          format: int64
      - name: warehouse_id
        in: path
        required: true
        schema:
          type: string
          format: uuid
      responses:
        '200':
          description: List of soft-deleted tabulars
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListDeletedTabularsResponse'
        4XX:
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IcebergErrorResponse'
  /management/v1/warehouse/{warehouse_id}/deleted_tabulars/undrop:
    post:
      tags:
      - warehouse
      operationId: undrop_tabulars
      parameters:
      - name: warehouse_id
        in: path
        required: true
        schema:
          type: string
          format: uuid
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UndropTabularsRequest'
        required: true
      responses:
        '204':
          description: Tabular undropped successfully
        4XX:
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IcebergErrorResponse'
  /management/v1/warehouse/{warehouse_id}/rename:
    post:
      tags:
      - warehouse
      summary: Rename a warehouse
      operationId: rename_warehouse
      parameters:
      - name: warehouse_id
        in: path
        required: true
        schema:
          type: string
          format: uuid
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RenameWarehouseRequest'
        required: true
      responses:
        '200':
          description: Warehouse renamed successfully
        4XX:
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IcebergErrorResponse'
  /management/v1/warehouse/{warehouse_id}/statistics:
    get:
      tags:
      - warehouse
      summary: Get warehouse statistics
      description: |-
        Get statistics about the warehouse, currently table and view counts over time.

        We lazily create a new statistics entry every hour, in between hours, the existing entry is
        being updated. If there's a change at created_at + 1 hour, a new entry is created.
        If there's been no change, no new entry is created, meaning there may be gaps.

        Example:
        - 00:16:32: warehouse created:
            - timestamp: 01:00:00, created_at: 00:16:32, updated_at: null, 0 tables, 0 views
        - 00:30:00: table created:
            - timestamp: 01:00:00, created_at: 00:16:32, updated_at: 00:30:00, 1 table, 0 views
        - 00:45:00: view created:
            - timestamp: 01:00:00, created_at: 00:16:32, updated_at: 00:45:00, 1 table, 1 view
        - 01:00:36: table deleted:
            - timestamp: 02:00:00, created_at: 01:00:36, updated_at: null, 0 tables, 1 view
            - timestamp: 01:00:00, created_at: 00:16:32, updated_at: 00:45:00, 1 table, 1 view
      operationId: get_warehouse_statistics
      parameters:
      - name: page_token
        in: query
        description: Next page token
        required: false
        schema:
          type: string
      - name: page_size
        in: query
        description: Signals an upper bound of the number of results that a client will receive.
        required: false
        schema:
          type:
          - integer
          - 'null'
          format: int64
      - name: warehouse_id
        in: path
        required: true
        schema:
          type: string
          format: uuid
      responses:
        '200':
          description: Warehouse statistics
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WarehouseStatisticsResponse'
        4XX:
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IcebergErrorResponse'
  /management/v1/warehouse/{warehouse_id}/storage:
    post:
      tags:
      - warehouse
      summary: Update the storage profile of a warehouse including its storage credential.
      operationId: update_storage_profile
      parameters:
      - name: warehouse_id
        in: path
        required: true
        schema:
          type: string
          format: uuid
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateWarehouseStorageRequest'
        required: true
      responses:
        '200':
          description: Storage profile updated successfully
        4XX:
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IcebergErrorResponse'
  /management/v1/warehouse/{warehouse_id}/storage-credential:
    post:
      tags:
      - warehouse
      summary: |-
        Update the storage credential of a warehouse. The storage profile is not modified.
        This can be used to update credentials before expiration.
      operationId: update_storage_credential
      parameters:
      - name: warehouse_id
        in: path
        required: true
        schema:
          type: string
          format: uuid
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateWarehouseCredentialRequest'
        required: true
      responses:
        '200':
          description: Storage credential updated successfully
        4XX:
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IcebergErrorResponse'
  /management/v1/whoami:
    get:
      tags:
      - user
      summary: Get the currently authenticated user
      operationId: whoami
      responses:
        '200':
          description: User details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        4XX:
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IcebergErrorResponse'
components:
  schemas:
    AdlsProfile:
      type: object
      required:
      - filesystem
      - account-name
      properties:
        account-name:
          type: string
          description: Name of the azure storage account.
        authority-host:
          type:
          - string
          - 'null'
          format: uri
          description: 'The authority host to use for authentication. Default: `https://login.microsoftonline.com`.'
        filesystem:
          type: string
          description: Name of the adls filesystem, in blobstorage also known as container.
        host:
          type:
          - string
          - 'null'
          description: 'The host to use for the storage account. Default: `dfs.core.windows.net`.'
        key-prefix:
          type:
          - string
          - 'null'
          description: |-
            Subpath in the filesystem to use.
            The same prefix can be used for multiple warehouses.
        sas-token-validity-seconds:
          type:
          - integer
          - 'null'
          format: int64
          description: 'The validity of the sas token in seconds. Default: 3600.'
          minimum: 0
    AuthZBackend:
      type: string
      enum:
      - allow-all
      - openfga
    AzCredential:
      oneOf:
      - type: object
        title: AzCredentialClientCredentials
        required:
        - client-id
        - tenant-id
        - client-secret
        - credential-type
        properties:
          client-id:
            type: string
          client-secret:
            type: string
          credential-type:
            type: string
            enum:
            - client-credentials
          tenant-id:
            type: string
      - type: object
        title: AzCredentialSharedAccessKey
        required:
        - key
        - credential-type
        properties:
          credential-type:
            type: string
            enum:
            - shared-access-key
          key:
            type: string
    BootstrapRequest:
      type: object
      required:
      - accept-terms-of-use
      properties:
        accept-terms-of-use:
          type: boolean
          description: Set to true if you accept LAKEKEEPER terms of use.
        is-operator:
          type: boolean
          description: |-
            If set to true, the calling user is treated as an operator and obtain
            a corresponding role. If not specified, the user is treated as a human.
        user-email:
          type:
          - string
          - 'null'
          description: |-
            Email of the user performing bootstrap. Optional. If not provided
            the server will try to parse the email from the provided token.
        user-name:
          type:
          - string
          - 'null'
          description: |-
            Name of the user performing bootstrap. Optional. If not provided
            the server will try to parse the name from the provided token.
            The initial user will become the global admin.
        user-type:
          oneOf:
          - type: 'null'
          - $ref: '#/components/schemas/UserType'
            description: |-
              Type of the user performing bootstrap. Optional. If not provided
              the server will try to parse the type from the provided token.
    CheckOperation:
      oneOf:
      - type: object
        required:
        - server
        properties:
          server:
            type: object
            required:
            - action
            properties:
              action:
                $ref: '#/components/schemas/ServerAction'
      - type: object
        required:
        - project
        properties:
          project:
            type: object
            required:
            - action
            properties:
              action:
                $ref: '#/components/schemas/ProjectAction'
              project-id:
                type:
                - string
                - 'null'
                format: uuid
      - type: object
        required:
        - warehouse
        properties:
          warehouse:
            type: object
            required:
            - action
            - warehouse-id
            properties:
              action:
                $ref: '#/components/schemas/WarehouseAction'
              warehouse-id:
                type: string
                format: uuid
      - type: object
        required:
        - namespace
        properties:
          namespace:
            allOf:
            - $ref: '#/components/schemas/NamespaceIdentOrUuid'
            - type: object
              required:
              - action
              properties:
                action:
                  $ref: '#/components/schemas/NamespaceAction'
      - type: object
        required:
        - table
        properties:
          table:
            allOf:
            - $ref: '#/components/schemas/TabularIdentOrUuid'
            - type: object
              required:
              - action
              properties:
                action:
                  $ref: '#/components/schemas/TableAction'
      - type: object
        required:
        - view
        properties:
          view:
            allOf:
            - $ref: '#/components/schemas/TabularIdentOrUuid'
            - type: object
              required:
              - action
              properties:
                action:
                  $ref: '#/components/schemas/ViewAction'
      description: Represents an action on an object
    CheckRequest:
      type: object
      description: Check if a specific action is allowed on the given object
      required:
      - operation
      properties:
        identity:
          oneOf:
          - type: 'null'
          - $ref: '#/components/schemas/UserOrRole'
            description: The user or role to check access for.
        operation:
          $ref: '#/components/schemas/CheckOperation'
          description: The operation to check.
    CheckResponse:
      type: object
      required:
      - allowed
      properties:
        allowed:
          type: boolean
          description: Whether the action is allowed.
    CreateProjectRequest:
      type: object
      required:
      - project-name
      properties:
        project-id:
          type:
          - string
          - 'null'
          format: uuid
          description: |-
            Request a specific project ID - optional.
            If not provided, a new project ID will be generated (recommended).
        project-name:
          type: string
          description: Name of the project to create.
    CreateProjectResponse:
      type: object
      required:
      - project-id
      properties:
        project-id:
          type: string
          format: uuid
          description: ID of the created project.
    CreateRoleRequest:
      type: object
      required:
      - name
      properties:
        description:
          type:
          - string
          - 'null'
          description: Description of the role
        name:
          type: string
          description: Name of the role to create
        project-id:
          type: string
          format: uuid
          description: |-
            Project ID in which the role is created.
            Only required if the project ID cannot be inferred and no default project is set.
    CreateUserRequest:
      type: object
      properties:
        email:
          type:
          - string
          - 'null'
          description: |-
            Email of the user. If id is not specified, the email is extracted
            from the provided token.
        id:
          type:
          - string
          - 'null'
          description: |-
            Subject id of the user - allows user provisioning.
            The id must be identical to the subject in JWT tokens.
            To create users in self-service manner, do not set the id.
            The id is then extracted from the passed JWT token.
        name:
          type:
          - string
          - 'null'
          description: |-
            Name of the user. If id is not specified, the name is extracted
            from the provided token.
        update-if-exists:
          type: boolean
          description: |-
            Update the user if it already exists
            Default: false
        user-type:
          oneOf:
          - type: 'null'
          - $ref: '#/components/schemas/UserType'
            description: Type of the user. Useful to override wrongly classified users
    CreateWarehouseRequest:
      type: object
      required:
      - warehouse-name
      - storage-profile
      properties:
        delete-profile:
          $ref: '#/components/schemas/TabularDeleteProfile'
          description: |-
            Profile to determine behavior upon dropping of tabulars, defaults to soft-deletion with
            7 days expiration.
        project-id:
          type:
          - string
          - 'null'
          format: uuid
          description: |-
            Project ID in which to create the warehouse.
            If no default project is set for this server, this field is required.
        storage-credential:
          oneOf:
          - type: 'null'
          - $ref: '#/components/schemas/StorageCredential'
            description: Optional storage credential to use for the warehouse.
        storage-profile:
          $ref: '#/components/schemas/StorageProfile'
          description: Storage profile to use for the warehouse.
        warehouse-name:
          type: string
          description: |-
            Name of the warehouse to create. Must be unique
            within a project and may not contain "/"
    CreateWarehouseResponse:
      type: object
      required:
      - warehouse-id
      properties:
        warehouse-id:
          type: string
          format: uuid
          description: ID of the created warehouse.
    DeletedTabularResponse:
      type: object
      required:
      - id
      - name
      - namespace
      - typ
      - warehouse_id
      - created_at
      - deleted_at
      - expiration_date
      properties:
        created_at:
          type: string
          format: date-time
          description: Date when the tabular was created
        deleted_at:
          type: string
          format: date-time
          description: Date when the tabular was deleted
        expiration_date:
          type: string
          format: date-time
          description: Date when the tabular will not be recoverable anymore
        id:
          type: string
          format: uuid
          description: Unique identifier of the tabular
        name:
          type: string
          description: Name of the tabular
        namespace:
          type: array
          items:
            type: string
          description: List of namespace parts the tabular belongs to
        typ:
          $ref: '#/components/schemas/TabularType'
          description: Type of the tabular
        warehouse_id:
          type: string
          format: uuid
          description: Warehouse ID where the tabular is stored
    ErrorModel:
      type: object
      description: JSON error payload returned in a response with further details on the error
      required:
      - message
      - type
      - code
      properties:
        code:
          type: integer
          format: int32
          description: HTTP response code
          minimum: 0
        message:
          type: string
          description: Human-readable error message
        stack:
          type: array
          items:
            type: string
        type:
          type: string
          description: Internal type definition of the error
    GcsCredential:
      oneOf:
      - type: object
        title: GcsCredentialServiceAccountKey
        description: |-
          Service Account Key

          The key is the JSON object obtained when creating a service account key in the GCP console.
        required:
        - key
        - credential-type
        properties:
          credential-type:
            type: string
            enum:
            - service-account-key
          key:
            $ref: '#/components/schemas/GcsServiceKey'
      description: |-
        GCS Credentials

        Currently only supports Service Account Key
        Example of a key:
        ```json
            {
              "type": "service_account",
              "project_id": "example-project-1234",
              "private_key_id": "....",
              "private_key": "-----BEGIN PRIVATE KEY-----\n.....\n-----END PRIVATE KEY-----\n",
              "client_email": "abc@example-project-1234.iam.gserviceaccount.com",
              "client_id": "123456789012345678901",
              "auth_uri": "https://accounts.google.com/o/oauth2/auth",
              "token_uri": "https://oauth2.googleapis.com/token",
              "auth_provider_x509_cert_url": "https://www.googleapis.com/oauth2/v1/certs",
              "client_x509_cert_url": "https://www.googleapis.com/robot/v1/metadata/x509/abc%example-project-1234.iam.gserviceaccount.com",
              "universe_domain": "googleapis.com"
            }
        ```
    GcsProfile:
      type: object
      required:
      - bucket
      properties:
        bucket:
          type: string
          description: Name of the GCS bucket
        key-prefix:
          type:
          - string
          - 'null'
          description: |-
            Subpath in the bucket to use.
            The same prefix can be used for multiple warehouses.
    GcsServiceKey:
      type: object
      required:
      - type
      - project_id
      - private_key_id
      - private_key
      - client_email
      - client_id
      - auth_uri
      - token_uri
      - auth_provider_x509_cert_url
      - client_x509_cert_url
      - universe_domain
      properties:
        auth_provider_x509_cert_url:
          type: string
        auth_uri:
          type: string
        client_email:
          type: string
        client_id:
          type: string
        client_x509_cert_url:
          type: string
        private_key:
          type: string
        private_key_id:
          type: string
        project_id:
          type: string
        token_uri:
          type: string
        type:
          type: string
        universe_domain:
          type: string
    GetNamespaceAccessResponse:
      type: object
      required:
      - allowed-actions
      properties:
        allowed-actions:
          type: array
          items:
            $ref: '#/components/schemas/NamespaceAction'
    GetNamespaceAssignmentsResponse:
      type: object
      required:
      - assignments
      properties:
        assignments:
          type: array
          items:
            $ref: '#/components/schemas/NamespaceAssignment'
    GetNamespaceAuthPropertiesResponse:
      type: object
      required:
      - managed-access
      - managed-access-inherited
      properties:
        managed-access:
          type: boolean
        managed-access-inherited:
          type: boolean
    GetProjectAccessResponse:
      type: object
      required:
      - allowed-actions
      properties:
        allowed-actions:
          type: array
          items:
            $ref: '#/components/schemas/ProjectAction'
    GetProjectAssignmentsResponse:
      type: object
      required:
      - assignments
      - project-id
      properties:
        assignments:
          type: array
          items:
            $ref: '#/components/schemas/ProjectAssignment'
        project-id:
          type: string
          format: uuid
    GetProjectResponse:
      type: object
      required:
      - project-id
      - project-name
      properties:
        project-id:
          type: string
          format: uuid
          description: ID of the project.
        project-name:
          type: string
          description: Name of the project
    GetRoleAccessResponse:
      type: object
      required:
      - allowed-actions
      properties:
        allowed-actions:
          type: array
          items:
            $ref: '#/components/schemas/RoleAction'
    GetRoleAssignmentsResponse:
      type: object
      required:
      - assignments
      properties:
        assignments:
          type: array
          items:
            $ref: '#/components/schemas/RoleAssignment'
    GetServerAccessResponse:
      type: object
      required:
      - allowed-actions
      properties:
        allowed-actions:
          type: array
          items:
            $ref: '#/components/schemas/ServerAction'
    GetServerAssignmentsResponse:
      type: object
      required:
      - assignments
      properties:
        assignments:
          type: array
          items:
            $ref: '#/components/schemas/ServerAssignment'
    GetTableAccessResponse:
      type: object
      required:
      - allowed-actions
      properties:
        allowed-actions:
          type: array
          items:
            $ref: '#/components/schemas/TableAction'
    GetTableAssignmentsResponse:
      type: object
      required:
      - assignments
      properties:
        assignments:
          type: array
          items:
            $ref: '#/components/schemas/TableAssignment'
    GetViewAccessResponse:
      type: object
      required:
      - allowed-actions
      properties:
        allowed-actions:
          type: array
          items:
            $ref: '#/components/schemas/ViewAction'
    GetViewAssignmentsResponse:
      type: object
      required:
      - assignments
      properties:
        assignments:
          type: array
          items:
            $ref: '#/components/schemas/ViewAssignment'
    GetWarehouseAccessResponse:
      type: object
      required:
      - allowed-actions
      properties:
        allowed-actions:
          type: array
          items:
            $ref: '#/components/schemas/WarehouseAction'
    GetWarehouseAssignmentsResponse:
      type: object
      required:
      - assignments
      properties:
        assignments:
          type: array
          items:
            $ref: '#/components/schemas/WarehouseAssignment'
    GetWarehouseAuthPropertiesResponse:
      type: object
      required:
      - managed-access
      properties:
        managed-access:
          type: boolean
    GetWarehouseResponse:
      type: object
      required:
      - id
      - name
      - project-id
      - storage-profile
      - delete-profile
      - status
      properties:
        delete-profile:
          $ref: '#/components/schemas/TabularDeleteProfile'
          description: Delete profile used for the warehouse.
        id:
          type: string
          format: uuid
          description: ID of the warehouse.
        name:
          type: string
          description: Name of the warehouse.
        project-id:
          type: string
          format: uuid
          description: Project ID in which the warehouse is created.
        status:
          $ref: '#/components/schemas/WarehouseStatus'
          description: Whether the warehouse is active.
        storage-profile:
          $ref: '#/components/schemas/StorageProfile'
          description: Storage profile used for the warehouse.
    IcebergErrorResponse:
      type: object
      description: JSON wrapper for all error responses (non-2xx)
      required:
      - error
      properties:
        error:
          $ref: '#/components/schemas/ErrorModel'
    ListDeletedTabularsResponse:
      type: object
      required:
      - tabulars
      properties:
        next_page_token:
          type:
          - string
          - 'null'
          description: Token to fetch the next page
        tabulars:
          type: array
          items:
            $ref: '#/components/schemas/DeletedTabularResponse'
          description: List of tabulars
    ListProjectsResponse:
      type: object
      required:
      - projects
      properties:
        projects:
          type: array
          items:
            $ref: '#/components/schemas/GetProjectResponse'
          description: List of projects
    ListRolesResponse:
      type: object
      required:
      - roles
      properties:
        next_page_token:
          type:
          - string
          - 'null'
        roles:
          type: array
          items:
            $ref: '#/components/schemas/Role'
    ListUsersResponse:
      type: object
      required:
      - users
      properties:
        next_page_token:
          type:
          - string
          - 'null'
        users:
          type: array
          items:
            $ref: '#/components/schemas/User'
    ListWarehousesResponse:
      type: object
      required:
      - warehouses
      properties:
        warehouses:
          type: array
          items:
            $ref: '#/components/schemas/GetWarehouseResponse'
          description: List of warehouses in the project.
    NamespaceAction:
      type: string
      enum:
      - create_table
      - create_view
      - create_namespace
      - delete
      - update_properties
      - get_metadata
      - read_assignments
      - grant_create
      - grant_describe
      - grant_modify
      - grant_select
      - grant_pass_grants
      - grant_manage_grants
    NamespaceAssignment:
      oneOf:
      - allOf:
        - $ref: '#/components/schemas/UserOrRole'
        - type: object
          required:
          - type
          properties:
            type:
              type: string
              enum:
              - ownership
        title: NamespaceAssignmentOwnership
      - allOf:
        - $ref: '#/components/schemas/UserOrRole'
        - type: object
          required:
          - type
          properties:
            type:
              type: string
              enum:
              - pass_grants
        title: NamespaceAssignmentPassGrants
      - allOf:
        - $ref: '#/components/schemas/UserOrRole'
        - type: object
          required:
          - type
          properties:
            type:
              type: string
              enum:
              - manage_grants
        title: NamespaceAssignmentManageGrants
      - allOf:
        - $ref: '#/components/schemas/UserOrRole'
        - type: object
          required:
          - type
          properties:
            type:
              type: string
              enum:
              - describe
        title: NamespaceAssignmentDescribe
      - allOf:
        - $ref: '#/components/schemas/UserOrRole'
        - type: object
          required:
          - type
          properties:
            type:
              type: string
              enum:
              - select
        title: NamespaceAssignmentSelect
      - allOf:
        - $ref: '#/components/schemas/UserOrRole'
        - type: object
          required:
          - type
          properties:
            type:
              type: string
              enum:
              - create
        title: NamespaceAssignmentCreate
      - allOf:
        - $ref: '#/components/schemas/UserOrRole'
        - type: object
          required:
          - type
          properties:
            type:
              type: string
              enum:
              - modify
        title: NamespaceAssignmentModify
    NamespaceIdentOrUuid:
      oneOf:
      - type: object
        required:
        - namespace-id
        properties:
          namespace-id:
            type: string
            format: uuid
      - type: object
        required:
        - namespace
        - warehouse-id
        properties:
          namespace:
            type: array
            items:
              type: string
          warehouse-id:
            type: string
            format: uuid
      description: Identifier for a namespace, either a UUID or its name and warehouse ID
    NamespaceRelation:
      type: string
      enum:
      - ownership
      - pass_grants
      - manage_grants
      - describe
      - select
      - create
      - modify
    ProjectAction:
      type: string
      enum:
      - create_warehouse
      - delete
      - rename
      - list_warehouses
      - create_role
      - list_roles
      - search_roles
      - read_assignments
      - grant_role_creator
      - grant_create
      - grant_describe
      - grant_modify
      - grant_select
      - grant_project_admin
      - grant_security_admin
      - grant_data_admin
    ProjectAssignment:
      oneOf:
      - allOf:
        - $ref: '#/components/schemas/UserOrRole'
        - type: object
          required:
          - type
          properties:
            type:
              type: string
              enum:
              - project_admin
        title: ProjectAssignmentProjectAdmin
      - allOf:
        - $ref: '#/components/schemas/UserOrRole'
        - type: object
          required:
          - type
          properties:
            type:
              type: string
              enum:
              - security_admin
        title: ProjectAssignmentSecurityAdmin
      - allOf:
        - $ref: '#/components/schemas/UserOrRole'
        - type: object
          required:
          - type
          properties:
            type:
              type: string
              enum:
              - data_admin
        title: ProjectAssignmentDataAdmin
      - allOf:
        - $ref: '#/components/schemas/UserOrRole'
        - type: object
          required:
          - type
          properties:
            type:
              type: string
              enum:
              - role_creator
        title: ProjectAssignmentRoleCreator
      - allOf:
        - $ref: '#/components/schemas/UserOrRole'
        - type: object
          required:
          - type
          properties:
            type:
              type: string
              enum:
              - describe
        title: ProjectAssignmentDescribe
      - allOf:
        - $ref: '#/components/schemas/UserOrRole'
        - type: object
          required:
          - type
          properties:
            type:
              type: string
              enum:
              - select
        title: ProjectAssignmentSelect
      - allOf:
        - $ref: '#/components/schemas/UserOrRole'
        - type: object
          required:
          - type
          properties:
            type:
              type: string
              enum:
              - create
        title: ProjectAssignmentCreate
      - allOf:
        - $ref: '#/components/schemas/UserOrRole'
        - type: object
          required:
          - type
          properties:
            type:
              type: string
              enum:
              - modify
        title: ProjectAssignmentModify
    ProjectRelation:
      type: string
      enum:
      - project_admin
      - security_admin
      - data_admin
      - role_creator
      - describe
      - select
      - create
      - modify
    RenameProjectRequest:
      type: object
      required:
      - new-name
      properties:
        new-name:
          type: string
          description: New name for the project.
        project-id:
          type:
          - string
          - 'null'
          format: uuid
          description: |-
            Optional project ID.
            Only required if the project ID cannot be inferred and no default project is set.
    RenameWarehouseRequest:
      type: object
      required:
      - new-name
      properties:
        new-name:
          type: string
          description: New name for the warehouse.
    Role:
      type: object
      required:
      - id
      - name
      - project-id
      - created-at
      properties:
        created-at:
          type: string
          format: date-time
          description: Timestamp when the role was created
        description:
          type:
          - string
          - 'null'
          description: Description of the role
        id:
          type: string
          format: uuid
          description: Globally unique id of this role
        name:
          type: string
          description: Name of the role
        project-id:
          type: string
          format: uuid
          description: Project ID in which the role is created.
        updated-at:
          type:
          - string
          - 'null'
          format: date-time
          description: Timestamp when the role was last updated
    RoleAction:
      type: string
      enum:
      - assume
      - can_grant_assignee
      - can_change_ownership
      - delete
      - update
      - read
      - read_assignments
    RoleAssignment:
      oneOf:
      - allOf:
        - $ref: '#/components/schemas/UserOrRole'
        - type: object
          required:
          - type
          properties:
            type:
              type: string
              enum:
              - assignee
        title: RoleAssignmentAssignee
      - allOf:
        - $ref: '#/components/schemas/UserOrRole'
        - type: object
          required:
          - type
          properties:
            type:
              type: string
              enum:
              - ownership
        title: RoleAssignmentOwnership
    RoleRelation:
      type: string
      enum:
      - assignee
      - ownership
    S3Credential:
      oneOf:
      - type: object
        title: S3CredentialAccessKey
        required:
        - aws-access-key-id
        - aws-secret-access-key
        - credential-type
        properties:
          aws-access-key-id:
            type: string
          aws-secret-access-key:
            type: string
          credential-type:
            type: string
            enum:
            - access-key
    S3Flavor:
      type: string
      enum:
      - aws
      - s3-compat
    S3Profile:
      type: object
      required:
      - bucket
      - region
      - sts-enabled
      properties:
        allow-alternative-protocols:
          type:
          - boolean
          - 'null'
          description: |-
            Allow `s3a://` and `s3n://` in locations.
            This is disabled by default. We do not recommend to use this setting
            except for migration of old hadoop-based tables via the register endpoint.
            Tables with `s3a` paths are not accessible outside the Java ecosystem.
        assume-role-arn:
          type:
          - string
          - 'null'
          description: Optional ARN to assume when accessing the bucket
        bucket:
          type: string
          description: Name of the S3 bucket
        endpoint:
          type:
          - string
          - 'null'
          format: uri
          description: |-
            Optional endpoint to use for S3 requests, if not provided
            the region will be used to determine the endpoint.
            If both region and endpoint are provided, the endpoint will be used.
            Example: `http://s3-de.my-domain.com:9000`
        flavor:
          $ref: '#/components/schemas/S3Flavor'
          description: |-
            S3 flavor to use.
            Defaults to AWS
        key-prefix:
          type:
          - string
          - 'null'
          description: |-
            Subpath in the bucket to use.
            The same prefix can be used for multiple warehouses.
        path-style-access:
          type:
          - boolean
          - 'null'
          description: |-
            Path style access for S3 requests.
            If the underlying S3 supports both, we recommend to not set `path_style_access`.
        region:
          type: string
          description: Region to use for S3 requests.
        sts-enabled:
          type: boolean
        sts-role-arn:
          type:
          - string
          - 'null'
          description: Optional role ARN to assume for sts vended-credentials
    SearchRoleRequest:
      type: object
      required:
      - search
      properties:
        project-id:
          type:
          - string
          - 'null'
          format: uuid
          description: |-
            Deprecated: Please use the x-project-id header instead.
            Project ID in which the role is created.
            Only required if the project ID cannot be inferred from the
            users token and no default project is set.
        search:
          type: string
          description: |-
            Search string for fuzzy search.
            Length is truncated to 64 characters.
    SearchRoleResponse:
      type: object
      required:
      - roles
      properties:
        roles:
          type: array
          items:
            $ref: '#/components/schemas/Role'
          description: List of users matching the search criteria
    SearchUser:
      type: object
      required:
      - name
      - id
      - user-type
      properties:
        email:
          type:
          - string
          - 'null'
          description: |-
            Email of the user. If id is not specified, the email is extracted
            from the provided token.
        id:
          type: string
          description: ID of the user
        name:
          type: string
          description: Name of the user
        user-type:
          $ref: '#/components/schemas/UserType'
          description: Type of the user
    SearchUserRequest:
      type: object
      required:
      - search
      properties:
        search:
          type: string
          description: |-
            Search string for fuzzy search.
            Length is truncated to 64 characters.
    SearchUserResponse:
      type: object
      description: Search result for users
      required:
      - users
      properties:
        users:
          type: array
          items:
            $ref: '#/components/schemas/SearchUser'
          description: List of users matching the search criteria
    ServerAction:
      type: string
      enum:
      - create_project
      - update_users
      - delete_users
      - list_users
      - grant_admin
      - provision_users
      - read_assignments
    ServerAssignment:
      oneOf:
      - allOf:
        - $ref: '#/components/schemas/UserOrRole'
        - type: object
          required:
          - type
          properties:
            type:
              type: string
              enum:
              - admin
        title: ServerAssignmentAdmin
      - allOf:
        - $ref: '#/components/schemas/UserOrRole'
        - type: object
          required:
          - type
          properties:
            type:
              type: string
              enum:
              - operator
        title: ServerAssignmentOperator
    ServerInfo:
      type: object
      required:
      - version
      - bootstrapped
      - server-id
      - default-project-id
      - authz-backend
      properties:
        authz-backend:
          $ref: '#/components/schemas/AuthZBackend'
          description: '`AuthZ` backend in use.'
        bootstrapped:
          type: boolean
          description: Whether the catalog has been bootstrapped.
        default-project-id:
          type: string
          format: uuid
          description: Default Project ID. Null if not set
        server-id:
          type: string
          format: uuid
          description: ID of the server.
        version:
          type: string
          description: Version of the server.
    ServerRelation:
      type: string
      enum:
      - admin
      - operator
    SetManagedAccessRequest:
      type: object
      required:
      - managed-access
      properties:
        managed-access:
          type: boolean
    StorageCredential:
      oneOf:
      - allOf:
        - $ref: '#/components/schemas/S3Credential'
          description: |-
            Credentials for S3 storage

            Example payload in the code-snippet below:

            ```
            use iceberg_catalog::service::storage::StorageCredential;
            let cred: StorageCredential = serde_json::from_str(r#"{
                "type": "s3",
                "credential-type": "access-key",
                "aws-access-key-id": "minio-root-user",
                "aws-secret-access-key": "minio-root-password"
              }"#).unwrap();
            ```
        - type: object
          required:
          - type
          properties:
            type:
              type: string
              enum:
              - s3
        title: StorageCredentialS3
        description: |-
          Credentials for S3 storage

          Example payload in the code-snippet below:

          ```
          use iceberg_catalog::service::storage::StorageCredential;
          let cred: StorageCredential = serde_json::from_str(r#"{
              "type": "s3",
              "credential-type": "access-key",
              "aws-access-key-id": "minio-root-user",
              "aws-secret-access-key": "minio-root-password"
            }"#).unwrap();
          ```
      - allOf:
        - $ref: '#/components/schemas/AzCredential'
          description: |-
            Credentials for Az storage

            Example payload:

            ```
            use iceberg_catalog::service::storage::StorageCredential;
            let cred: StorageCredential = serde_json::from_str(r#"{
                "type": "az",
                "credential-type": "client-credentials",
                "client-id": "...",
                "client-secret": "...",
                "tenant-id": "..."
              }"#).unwrap();
            ```
        - type: object
          required:
          - type
          properties:
            type:
              type: string
              enum:
              - az
        title: StorageCredentialAz
        description: |-
          Credentials for Az storage

          Example payload:

          ```
          use iceberg_catalog::service::storage::StorageCredential;
          let cred: StorageCredential = serde_json::from_str(r#"{
              "type": "az",
              "credential-type": "client-credentials",
              "client-id": "...",
              "client-secret": "...",
              "tenant-id": "..."
            }"#).unwrap();
          ```
      - allOf:
        - $ref: '#/components/schemas/GcsCredential'
          description: |
            Credentials for GCS storage

            Example payload in the code-snippet below:

            ```
            use iceberg_catalog::service::storage::StorageCredential;
            let cred: StorageCredential = serde_json::from_str(r#"{
                "type": "gcs",
                "credential-type": "service-account-key",
                "key": {
                  "type": "service_account",
                  "project_id": "example-project-1234",
                  "private_key_id": "....",
                  "private_key": "-----BEGIN PRIVATE KEY-----\n.....\n-----END PRIVATE KEY-----\n",
                  "client_email": "abc@example-project-1234.iam.gserviceaccount.com",
                  "client_id": "123456789012345678901",
                  "auth_uri": "https://accounts.google.com/o/oauth2/auth",
                  "token_uri": "https://oauth2.googleapis.com/token",
                  "auth_provider_x509_cert_url": "https://www.googleapis.com/oauth2/v1/certs",
                  "client_x509_cert_url": "https://www.googleapis.com/robot/v1/metadata/x509/abc%example-project-1234.iam.gserviceaccount.com",
                  "universe_domain": "googleapis.com"
                }
            }"#).unwrap();
            ```
        - type: object
          required:
          - type
          properties:
            type:
              type: string
              enum:
              - gcs
        title: StorageCredentialGcs
        description: |
          Credentials for GCS storage

          Example payload in the code-snippet below:

          ```
          use iceberg_catalog::service::storage::StorageCredential;
          let cred: StorageCredential = serde_json::from_str(r#"{
              "type": "gcs",
              "credential-type": "service-account-key",
              "key": {
                "type": "service_account",
                "project_id": "example-project-1234",
                "private_key_id": "....",
                "private_key": "-----BEGIN PRIVATE KEY-----\n.....\n-----END PRIVATE KEY-----\n",
                "client_email": "abc@example-project-1234.iam.gserviceaccount.com",
                "client_id": "123456789012345678901",
                "auth_uri": "https://accounts.google.com/o/oauth2/auth",
                "token_uri": "https://oauth2.googleapis.com/token",
                "auth_provider_x509_cert_url": "https://www.googleapis.com/oauth2/v1/certs",
                "client_x509_cert_url": "https://www.googleapis.com/robot/v1/metadata/x509/abc%example-project-1234.iam.gserviceaccount.com",
                "universe_domain": "googleapis.com"
              }
          }"#).unwrap();
          ```
      description: Storage secret for a warehouse.
    StorageProfile:
      oneOf:
      - allOf:
        - $ref: '#/components/schemas/AdlsProfile'
          description: Azure storage profile
        - type: object
          required:
          - type
          properties:
            type:
              type: string
              enum:
              - adls
        title: StorageProfileAdls
        description: Azure storage profile
      - allOf:
        - $ref: '#/components/schemas/S3Profile'
          description: S3 storage profile
        - type: object
          required:
          - type
          properties:
            type:
              type: string
              enum:
              - s3
        title: StorageProfileS3
        description: S3 storage profile
      - allOf:
        - $ref: '#/components/schemas/GcsProfile'
        - type: object
          required:
          - type
          properties:
            type:
              type: string
              enum:
              - gcs
        title: StorageProfileGcs
      description: Storage profile for a warehouse.
    TableAction:
      type: string
      enum:
      - drop
      - write_data
      - read_data
      - get_metadata
      - commit
      - rename
      - read_assignments
      - grant_pass_grants
      - grant_manage_grants
      - grant_describe
      - grant_select
      - grant_modify
      - change_ownership
    TableAssignment:
      oneOf:
      - allOf:
        - $ref: '#/components/schemas/UserOrRole'
        - type: object
          required:
          - type
          properties:
            type:
              type: string
              enum:
              - ownership
        title: TableAssignmentOwnership
      - allOf:
        - $ref: '#/components/schemas/UserOrRole'
        - type: object
          required:
          - type
          properties:
            type:
              type: string
              enum:
              - pass_grants
        title: TableAssignmentPassGrants
      - allOf:
        - $ref: '#/components/schemas/UserOrRole'
        - type: object
          required:
          - type
          properties:
            type:
              type: string
              enum:
              - manage_grants
        title: TableAssignmentManageGrants
      - allOf:
        - $ref: '#/components/schemas/UserOrRole'
        - type: object
          required:
          - type
          properties:
            type:
              type: string
              enum:
              - describe
        title: TableAssignmentDescribe
      - allOf:
        - $ref: '#/components/schemas/UserOrRole'
        - type: object
          required:
          - type
          properties:
            type:
              type: string
              enum:
              - select
        title: TableAssignmentSelect
      - allOf:
        - $ref: '#/components/schemas/UserOrRole'
        - type: object
          required:
          - type
          properties:
            type:
              type: string
              enum:
              - modify
        title: TableAssignmentCreate
    TableRelation:
      type: string
      enum:
      - ownership
      - pass_grants
      - manage_grants
      - describe
      - select
      - modify
    TabularDeleteProfile:
      oneOf:
      - type: object
        title: TabularDeleteProfileHard
        required:
        - type
        properties:
          type:
            type: string
            enum:
            - hard
      - type: object
        title: TabularDeleteProfileSoft
        required:
        - expiration-seconds
        - type
        properties:
          expiration-seconds:
            type: integer
            format: int32
          type:
            type: string
            enum:
            - soft
    TabularIdentOrUuid:
      oneOf:
      - type: object
        required:
        - table-id
        properties:
          table-id:
            type: string
            format: uuid
      - type: object
        required:
        - namespace
        - table
        - warehouse-id
        properties:
          namespace:
            type: array
            items:
              type: string
          table:
            type: string
            description: Name of the table or view
          warehouse-id:
            type: string
            format: uuid
      description: Identifier for a table or view, either a UUID or its name and namespace
    TabularIdentUuid:
      oneOf:
      - type: object
        required:
        - id
        - type
        properties:
          id:
            type: string
            format: uuid
          type:
            type: string
            enum:
            - table
      - type: object
        required:
        - id
        - type
        properties:
          id:
            type: string
            format: uuid
          type:
            type: string
            enum:
            - view
    TabularType:
      type: string
      description: Type of tabular
      enum:
      - table
      - view
    UndropTabularsRequest:
      type: object
      required:
      - targets
      properties:
        targets:
          type: array
          items:
            $ref: '#/components/schemas/TabularIdentUuid'
          description: Tabulars to undrop
    UpdateNamespaceAssignmentsRequest:
      type: object
      properties:
        deletes:
          type: array
          items:
            $ref: '#/components/schemas/NamespaceAssignment'
        writes:
          type: array
          items:
            $ref: '#/components/schemas/NamespaceAssignment'
    UpdateProjectAssignmentsRequest:
      type: object
      properties:
        deletes:
          type: array
          items:
            $ref: '#/components/schemas/ProjectAssignment'
        writes:
          type: array
          items:
            $ref: '#/components/schemas/ProjectAssignment'
    UpdateRoleAssignmentsRequest:
      type: object
      properties:
        deletes:
          type: array
          items:
            $ref: '#/components/schemas/RoleAssignment'
        writes:
          type: array
          items:
            $ref: '#/components/schemas/RoleAssignment'
    UpdateRoleRequest:
      type: object
      required:
      - name
      properties:
        description:
          type:
          - string
          - 'null'
          description: Description of the role. If not set, the description will be removed.
        name:
          type: string
          description: Name of the role to create
    UpdateServerAssignmentsRequest:
      type: object
      properties:
        deletes:
          type: array
          items:
            $ref: '#/components/schemas/ServerAssignment'
        writes:
          type: array
          items:
            $ref: '#/components/schemas/ServerAssignment'
    UpdateTableAssignmentsRequest:
      type: object
      properties:
        deletes:
          type: array
          items:
            $ref: '#/components/schemas/TableAssignment'
        writes:
          type: array
          items:
            $ref: '#/components/schemas/TableAssignment'
    UpdateUserRequest:
      type: object
      required:
      - name
      - user_type
      properties:
        email:
          type:
          - string
          - 'null'
        name:
          type: string
        user_type:
          $ref: '#/components/schemas/UserType'
    UpdateViewAssignmentsRequest:
      type: object
      properties:
        deletes:
          type: array
          items:
            $ref: '#/components/schemas/ViewAssignment'
        writes:
          type: array
          items:
            $ref: '#/components/schemas/ViewAssignment'
    UpdateWarehouseAssignmentsRequest:
      type: object
      properties:
        deletes:
          type: array
          items:
            $ref: '#/components/schemas/WarehouseAssignment'
        writes:
          type: array
          items:
            $ref: '#/components/schemas/WarehouseAssignment'
    UpdateWarehouseCredentialRequest:
      type: object
      properties:
        new-storage-credential:
          oneOf:
          - type: 'null'
          - $ref: '#/components/schemas/StorageCredential'
            description: |-
              New storage credential to use for the warehouse.
              If not specified, the existing credential is removed.
    UpdateWarehouseDeleteProfileRequest:
      type: object
      required:
      - delete-profile
      properties:
        delete-profile:
          $ref: '#/components/schemas/TabularDeleteProfile'
    UpdateWarehouseStorageRequest:
      type: object
      required:
      - storage-profile
      properties:
        storage-credential:
          oneOf:
          - type: 'null'
          - $ref: '#/components/schemas/StorageCredential'
            description: |-
              Optional storage credential to use for the warehouse.
              The existing credential is not re-used. If no credential is
              provided, we assume that this storage does not require credentials.
        storage-profile:
          $ref: '#/components/schemas/StorageProfile'
          description: |-
            Storage profile to use for the warehouse.
            The new profile must point to the same location as the existing profile
            to avoid data loss. For S3 this means that you may not change the
            bucket, key prefix, or region.
    User:
      type: object
      description: User of the catalog
      required:
      - name
      - id
      - user-type
      - last-updated-with
      - created-at
      properties:
        created-at:
          type: string
          format: date-time
          description: Timestamp when the user was created
        email:
          type:
          - string
          - 'null'
          description: Email of the user
        id:
          type: string
          description: The user's ID
        last-updated-with:
          $ref: '#/components/schemas/UserLastUpdatedWith'
          description: The endpoint that last updated the user
        name:
          type: string
          description: Name of the user
        updated-at:
          type:
          - string
          - 'null'
          format: date-time
          description: Timestamp when the user was last updated
        user-type:
          $ref: '#/components/schemas/UserType'
          description: Type of the user
    UserLastUpdatedWith:
      type: string
      description: How the user was last updated
      enum:
      - create-endpoint
      - config-call-creation
      - update-endpoint
    UserOrRole:
      oneOf:
      - type: object
        title: UserOrRoleUser
        description: Id of the user
        required:
        - user
        properties:
          user:
            type: string
            format: uuid
            description: Id of the user
      - type: object
        title: UserOrRoleRole
        description: Id of the role
        required:
        - role
        properties:
          role:
            type: string
            format: uuid
            description: Id of the role
      description: Identifies a user or a role
    UserType:
      type: string
      description: Type of a User
      enum:
      - human
      - application
    ViewAction:
      type: string
      enum:
      - drop
      - commit
      - get_metadata
      - rename
      - read_assignments
      - grant_pass_grants
      - grant_manage_grants
      - grant_describe
      - grant_modify
      - change_ownership
    ViewAssignment:
      oneOf:
      - allOf:
        - $ref: '#/components/schemas/UserOrRole'
        - type: object
          required:
          - type
          properties:
            type:
              type: string
              enum:
              - ownership
        title: ViewAssignmentOwnership
      - allOf:
        - $ref: '#/components/schemas/UserOrRole'
        - type: object
          required:
          - type
          properties:
            type:
              type: string
              enum:
              - pass_grants
        title: ViewAssignmentPassGrants
      - allOf:
        - $ref: '#/components/schemas/UserOrRole'
        - type: object
          required:
          - type
          properties:
            type:
              type: string
              enum:
              - manage_grants
        title: ViewAssignmentManageGrants
      - allOf:
        - $ref: '#/components/schemas/UserOrRole'
        - type: object
          required:
          - type
          properties:
            type:
              type: string
              enum:
              - describe
        title: ViewAssignmentDescribe
      - allOf:
        - $ref: '#/components/schemas/UserOrRole'
        - type: object
          required:
          - type
          properties:
            type:
              type: string
              enum:
              - modify
        title: ViewAssignmentModify
    ViewRelation:
      type: string
      enum:
      - ownership
      - pass_grants
      - manage_grants
      - describe
      - modify
    WarehouseAction:
      type: string
      enum:
      - create_namespace
      - delete
      - modify_storage
      - modify_storage_credential
      - get_config
      - get_metadata
      - list_namespaces
      - include_in_list
      - deactivate
      - activate
      - rename
      - list_deleted_tabulars
      - read_assignments
      - grant_create
      - grant_describe
      - grant_modify
      - grant_select
      - grant_pass_grants
      - grant_manage_grants
      - change_ownership
    WarehouseAssignment:
      oneOf:
      - allOf:
        - $ref: '#/components/schemas/UserOrRole'
        - type: object
          required:
          - type
          properties:
            type:
              type: string
              enum:
              - ownership
        title: WarehouseAssignmentOwnership
      - allOf:
        - $ref: '#/components/schemas/UserOrRole'
        - type: object
          required:
          - type
          properties:
            type:
              type: string
              enum:
              - pass_grants
        title: WarehouseAssignmentPassGrants
      - allOf:
        - $ref: '#/components/schemas/UserOrRole'
        - type: object
          required:
          - type
          properties:
            type:
              type: string
              enum:
              - manage_grants
        title: WarehouseAssignmentManageGrants
      - allOf:
        - $ref: '#/components/schemas/UserOrRole'
        - type: object
          required:
          - type
          properties:
            type:
              type: string
              enum:
              - describe
        title: WarehouseAssignmentDescribe
      - allOf:
        - $ref: '#/components/schemas/UserOrRole'
        - type: object
          required:
          - type
          properties:
            type:
              type: string
              enum:
              - select
        title: WarehouseAssignmentSelect
      - allOf:
        - $ref: '#/components/schemas/UserOrRole'
        - type: object
          required:
          - type
          properties:
            type:
              type: string
              enum:
              - create
        title: WarehouseAssignmentCreate
      - allOf:
        - $ref: '#/components/schemas/UserOrRole'
        - type: object
          required:
          - type
          properties:
            type:
              type: string
              enum:
              - modify
        title: WarehouseAssignmentModify
    WarehouseRelation:
      type: string
      enum:
      - ownership
      - pass_grants
      - manage_grants
      - describe
      - select
      - create
      - modify
    WarehouseStatistics:
      type: object
      required:
      - timestamp
      - number_of_tables
      - number_of_views
      - updated_at
      properties:
        number_of_tables:
          type: integer
          format: int64
          description: Number of tables in the warehouse.
        number_of_views:
          type: integer
          format: int64
          description: Number of views in the warehouse.
        timestamp:
          type: string
          format: date-time
          description: |-
            Timestamp of when these statistics are valid until

            We lazily create a new statistics entry every hour, in between hours, the existing entry
            is being updated. If there's a change at `created_at` + 1 hour, a new entry is created. If
            there's no change, no new entry is created.
        updated_at:
          type: string
          format: date-time
          description: Timestamp of when these statistics were last updated
    WarehouseStatisticsResponse:
      type: object
      required:
      - warehouse-ident
      - stats
      properties:
        next-page-token:
          type:
          - string
          - 'null'
          description: Next page token
        stats:
          type: array
          items:
            $ref: '#/components/schemas/WarehouseStatistics'
          description: Ordered list of warehouse statistics.
        warehouse-ident:
          type: string
          format: uuid
          description: ID of the warehouse for which the stats were collected.
    WarehouseStatus:
      type: string
      description: Status of a warehouse
      enum:
      - active
      - inactive
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
security:
- bearerAuth: []
tags:
- name: server
  description: Manage Server
- name: project
  description: Manage Projects
- name: warehouse
  description: Manage Warehouses
- name: user
  description: Manage Users
- name: role
  description: Manage Roles
- name: permissions
  description: Manage Permissions

